/**
 * –ê–±—Å—É—Ä–¥–Ω–∞—è –ò–≥—Ä–∞ - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ v2.0
 * –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º, API –∏ PWA
 */

'use strict';

// ================================================
// üéØ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´
// ================================================

const CONFIG = {
  API: {
    PHRASES_URL: '/phrases.json',
    RETRY_ATTEMPTS: 3,
    TIMEOUT: 5000
  },
  STORAGE: {
    THEME_KEY: 'absudia_theme',
    FAVORITES_KEY: 'absudia_favorites',
    HISTORY_KEY: 'absudia_history',
    SETTINGS_KEY: 'absudia_settings'
  },
  CATEGORIES: {
    absurd: { name: '–ê–±—Å—É—Ä–¥', emoji: 'ü§™', color: 'var(--cat-absurd)' },
    horror: { name: '–£–∂–∞—Å—ã', emoji: 'üëª', color: 'var(--cat-horror)' },
    kids: { name: '–î–µ—Ç—Å–∫–æ–µ', emoji: 'üß∏', color: 'var(--cat-kids)' },
    romance: { name: '–†–æ–º–∞–Ω—Ç–∏–∫–∞', emoji: 'üíï', color: 'var(--cat-romance)' },
    adult: { name: '18+', emoji: 'üîû', color: 'var(--cat-adult)' },
    street: { name: '–£–ª–∏—Ü–∞', emoji: 'üèôÔ∏è', color: 'var(--cat-street)' }
  },
  ANIMATIONS: {
    FAST: 150,
    NORMAL: 300,
    SLOW: 600
  },
  PWA: {
    UPDATE_CHECK_INTERVAL: 60000, // 1 –º–∏–Ω—É—Ç–∞
    CACHE_NAME: 'absudia-v1'
  }
};

// ================================================
// üóÇÔ∏è –£–¢–ò–õ–ò–¢–´ –ò –•–ï–õ–ü–ï–†–´
// ================================================

class Utils {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è async/await
   */
  static delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
   */
  static generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ DOM
   */
  static getElement(selector, required = true) {
    const element = document.querySelector(selector);
    if (required && !element) {
      console.error(`–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${selector}`);
    }
    return element;
  }

  /**
   * –î–µ–±–∞—É–Ω—Å —Ñ—É–Ω–∫—Ü–∏–∏
   */
  static debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –±—Ä–∞—É–∑–µ—Ä–∞
   */
  static checkBrowserSupport() {
    return {
      serviceWorker: 'serviceWorker' in navigator,
      webShare: 'share' in navigator,
      clipboard: 'clipboard' in navigator,
      vibration: 'vibrate' in navigator,
      localStorage: (() => {
        try {
          localStorage.setItem('test', 'test');
          localStorage.removeItem('test');
          return true;
        } catch {
          return false;
        }
      })()
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static formatDate(timestamp) {
    const date = new Date(timestamp);
    const now = new Date();
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffMins < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU');
  }

  /**
   * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
   */
  static async copyToClipboard(text) {
    try {
      if (navigator.clipboard) {
        await navigator.clipboard.writeText(text);
        return true;
      } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.opacity = '0';
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        return true;
      }
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç:', error);
      return false;
    }
  }
}

// ================================================
// üíæ –°–ò–°–¢–ï–ú–ê –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–•
// ================================================

class StorageManager {
  constructor() {
    this.isSupported = Utils.checkBrowserSupport().localStorage;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  set(key, value) {
    if (!this.isSupported) return false;
    
    try {
      const data = {
        value,
        timestamp: Date.now(),
        version: '1.0'
      };
      localStorage.setItem(key, JSON.stringify(data));
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  get(key, defaultValue = null) {
    if (!this.isSupported) return defaultValue;
    
    try {
      const item = localStorage.getItem(key);
      if (!item) return defaultValue;
      
      const data = JSON.parse(item);
      return data.value !== undefined ? data.value : defaultValue;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ localStorage:', error);
      return defaultValue;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  remove(key) {
    if (!this.isSupported) return false;
    
    try {
      localStorage.removeItem(key);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ localStorage:', error);
      return false;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  cleanup(maxAge = 30 * 24 * 60 * 60 * 1000) { // 30 –¥–Ω–µ–π
    if (!this.isSupported) return;
    
    const now = Date.now();
    const keysToRemove = [];
    
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key.startsWith('absudia_')) {
        try {
          const data = JSON.parse(localStorage.getItem(key));
          if (data.timestamp && (now - data.timestamp) > maxAge) {
            keysToRemove.push(key);
          }
        } catch {
          keysToRemove.push(key);
        }
      }
    }
    
    keysToRemove.forEach(key => localStorage.removeItem(key));
  }
}

// ================================================
// üé® –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–ï–ú–û–ô
// ================================================

class ThemeManager {
  constructor() {
    this.storage = new StorageManager();
    this.currentTheme = this.getInitialTheme();
    this.init();
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–µ–º—ã
   */
  getInitialTheme() {
    const savedTheme = this.storage.get(CONFIG.STORAGE.THEME_KEY);
    if (savedTheme) return savedTheme;
    
    return window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
   */
  init() {
    this.applyTheme(this.currentTheme);
    this.setupToggle();
    this.watchSystemTheme();
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
   */
  applyTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
    this.currentTheme = theme;
    this.updateToggleButton();
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    this.storage.set(CONFIG.STORAGE.THEME_KEY, theme);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ meta-—Ç–µ–≥–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    const metaThemeColor = document.querySelector('meta[name="theme-color"]');
    if (metaThemeColor) {
      metaThemeColor.content = theme === 'light' ? '#4f46e5' : '#667eea';
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
   */
  toggle() {
    const newTheme = this.currentTheme === 'dark' ? 'light' : 'dark';
    this.applyTheme(newTheme);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    document.body.style.transition = 'all 0.3s ease';
    setTimeout(() => {
      document.body.style.transition = '';
    }, CONFIG.ANIMATIONS.NORMAL);
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
   */
  setupToggle() {
    const themeToggle = Utils.getElement('#themeToggle', false);
    if (!themeToggle) return;
    
    themeToggle.addEventListener('click', () => this.toggle());
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
   */
  updateToggleButton() {
    const themeIcon = Utils.getElement('.theme-icon', false);
    const themeText = Utils.getElement('.theme-text', false);
    const themeToggle = Utils.getElement('#themeToggle', false);
    
    if (this.currentTheme === 'light') {
      if (themeIcon) themeIcon.textContent = '‚òÄÔ∏è';
      if (themeText) themeText.textContent = '–°–≤–µ—Ç–ª–∞—è';
      if (themeToggle) themeToggle.setAttribute('aria-label', '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ç—ë–º–Ω—É—é —Ç–µ–º—É');
    } else {
      if (themeIcon) themeIcon.textContent = 'üåô';
      if (themeText) themeText.textContent = '–¢—ë–º–Ω–∞—è';
      if (themeToggle) themeToggle.setAttribute('aria-label', '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É');
    }
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
   */
  watchSystemTheme() {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    mediaQuery.addEventListener('change', (e) => {
      if (!this.storage.get(CONFIG.STORAGE.THEME_KEY)) {
        const systemTheme = e.matches ? 'dark' : 'light';
        this.applyTheme(systemTheme);
      }
    });
  }
}

// ================================================
// üì° API –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –§–†–ê–ó
// ================================================

class PhrasesAPI {
  constructor() {
    this.cache = new Map();
    this.loading = false;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑ —Å retry –ª–æ–≥–∏–∫–æ–π
   */
  async loadPhrases() {
    if (this.cache.has('phrases')) {
      return this.cache.get('phrases');
    }

    if (this.loading) {
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
      while (this.loading) {
        await Utils.delay(100);
      }
      return this.cache.get('phrases');
    }

    this.loading = true;

    for (let attempt = 1; attempt <= CONFIG.API.RETRY_ATTEMPTS; attempt++) {
      try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), CONFIG.API.TIMEOUT);

        const response = await fetch(CONFIG.API.PHRASES_URL, {
          signal: controller.signal,
          cache: 'no-store'
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!this.validatePhrasesData(data)) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö');
        }

        this.cache.set('phrases', data);
        this.loading = false;
        return data;

      } catch (error) {
        console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–∑ –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error);
        
        if (attempt === CONFIG.API.RETRY_ATTEMPTS) {
          this.loading = false;
          return this.getFallbackPhrases();
        }
        
        await Utils.delay(1000 * attempt);
      }
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
   */
  validatePhrasesData(data) {
    if (!data || typeof data !== 'object') return false;
    
    const requiredCategories = Object.keys(CONFIG.CATEGORIES);
    return requiredCategories.every(category => 
      Array.isArray(data[category]) && data[category].length > 0
    );
  }

  /**
   * Fallback —Ñ—Ä–∞–∑—ã –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
   */
  getFallbackPhrases() {
    return {
      absurd: [
        "–¢—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ, –∏ —Ç–≤–æ–π –±–∞—Ç–æ–Ω —Å—Ç–∞–ª –º—ç—Ä–æ–º –≥–æ—Ä–æ–¥–∞.",
        "–≠–π, —Ç—ã, –Ω–µ –∑–∞–±—É–¥—å: —É —Ç–µ–±—è –≤ –∫–∞—Ä–º–∞–Ω–µ –ø–µ–ª—å–º–µ–Ω—å, –∞ –Ω–∞ –≥–æ–ª–æ–≤–µ –º–∞—Ä–º–µ–ª–∞–¥.",
        "–¢–≤–æ—è –∏–≥—Ä—É—à–∫–∞ —Å–±–µ–∂–∞–ª–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É —Ç–∞–Ω—Ü–æ—Ä–∞ –±–∞–ª—å–Ω—ã—Ö –≥—É—Å–µ–π.",
        "–î—Ä—É–≥, —Ç—ã –≤ –∫—É—Ä—Å–µ, —á—Ç–æ —Ç–≤–æ—è —Ç–µ–Ω—å —É—Å—Ç—Ä–æ–∏–ª–∞ –ø–æ–±–µ–≥ –∏–∑ —Ç–≤–æ–∏—Ö —Ç–∞–ø–æ–∫?",
        "–í—á–µ—Ä–∞ —Ç—ã –µ–ª –±—É—Ç–µ—Ä–±—Ä–æ–¥, –∞ —Å–µ–≥–æ–¥–Ω—è –æ–Ω –≤–µ–¥—ë—Ç –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å —á–∞–π–Ω–∏–∫–æ–º."
      ],
      horror: [
        "–í –∑–µ—Ä–∫–∞–ª–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–µ —Ç—ã, –∞ —Ç–≤–æ–π –±—É–¥—É—â–∏–π –∫–æ—à–º–∞—Ä.",
        "–ö–∞–∂–¥—É—é –Ω–æ—á—å —Å—Ç–µ–Ω—ã —Ç–≤–æ–µ–≥–æ –¥–æ–º–∞ –º–µ–Ω—è—é—Ç—Å—è –º–µ—Å—Ç–∞–º–∏.",
        "–¢–≤–æ—è —Ç–µ–Ω—å –∂–∏–≤—ë—Ç —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é, –∫–æ–≥–¥–∞ —Ç—ã —Å–ø–∏—à—å."
      ],
      kids: [
        "–ü–ª—é—à–µ–≤—ã–π –º–∏—à–∫–∞ –Ω–∞—É—á–∏–ª—Å—è –≥–æ—Ç–æ–≤–∏—Ç—å –±–ª–∏–Ω—á–∏–∫–∏!",
        "–†–∞–¥—É–≥–∞ —Ä–µ—à–∏–ª–∞ –ø–æ—Å–µ–ª–∏—Ç—å—Å—è –≤ —Ç–≤–æ—ë–º —Å–∞–¥—É.",
        "–û–±–ª–∞–∫–∞ —Å–µ–≥–æ–¥–Ω—è –∏–≥—Ä–∞—é—Ç –≤ –ø—Ä—è—Ç–∫–∏ —Å —Å–æ–ª–Ω—ã—à–∫–æ–º."
      ],
      romance: [
        "–¢–≤–æ—ë —Å–µ—Ä–¥—Ü–µ –±—å—ë—Ç—Å—è –≤ —Ä–∏—Ç–º–µ –ª—é–±–∏–º–æ–π –ø–µ—Å–Ω–∏.",
        "–ó–≤—ë–∑–¥—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–∞ –Ω–µ–±–µ –≤–∞—à–∏ –∏–º–µ–Ω–∞.",
        "–ö–∞–∂–¥—ã–π –∑–∞–∫–∞—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–µ."
      ],
      adult: [
        "–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç."
      ],
      street: [
        "–ù–∞ —Ä–∞–π–æ–Ω–µ –≤—Å–µ –∑–Ω–∞—é—Ç: —Ç—ã –∫—Ä—É—Ç–æ–π –∫–∞–∫ –º–æ—Ä–æ–∂–µ–Ω–æ–µ –≤ —è–Ω–≤–∞—Ä–µ.",
        "–¢–≤–æ—è –ø–æ—Ö–æ–¥–∫–∞ ‚Äî —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–∏–¥ –∏—Å–∫—É—Å—Å—Ç–≤–∞.",
        "–î–∞–∂–µ –≥–æ–ª—É–±–∏ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∫–∏–≤–∞—é—Ç —Ç–µ–±–µ."
      ]
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getRandomPhrase(category, excludeRecent = []) {
    const phrases = this.cache.get('phrases');
    if (!phrases || !phrases[category]) {
      return "–§—Ä–∞–∑—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.";
    }

    const categoryPhrases = phrases[category];
    let availablePhrases = categoryPhrases.filter(phrase => !excludeRecent.includes(phrase));
    
    // –ï—Å–ª–∏ –≤—Å–µ —Ñ—Ä–∞–∑—ã –∏—Å–∫–ª—é—á–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ
    if (availablePhrases.length === 0) {
      availablePhrases = categoryPhrases;
    }

    const randomIndex = Math.floor(Math.random() * availablePhrases.length);
    return availablePhrases[randomIndex];
  }
}

// ================================================
// üéÆ –û–°–ù–û–í–ù–û–ô –ò–ì–†–û–í–û–ô –ö–û–ù–¢–†–û–õ–õ–ï–†
// ================================================

class GameController {
  constructor() {
    this.storage = new StorageManager();
    this.phrasesAPI = new PhrasesAPI();
    this.state = this.initializeState();
    this.elements = this.getElements();
    this.recentPhrases = []; // –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤
    
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
   */
  initializeState() {
    return {
      currentCategory: 'absurd',
      phraseCount: 0,
      favorites: this.storage.get(CONFIG.STORAGE.FAVORITES_KEY, []),
      history: this.storage.get(CONFIG.STORAGE.HISTORY_KEY, []),
      settings: this.storage.get(CONFIG.STORAGE.SETTINGS_KEY, {
        soundEnabled: true,
        animationsEnabled: true,
        keyboardShortcuts: true
      }),
      isLoading: false,
      currentPhrase: null
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
   */
  getElements() {
    return {
      categoryButtons: document.querySelectorAll('.category-btn'),
      phraseText: Utils.getElement('#phraseText'),
      phraseCounter: Utils.getElement('#phraseCounter'),
      phraseCategory: Utils.getElement('#phraseCategory'),
      nextBtn: Utils.getElement('#nextBtn'),
      shareBtn: Utils.getElement('#shareBtn'),
      favoriteBtn: Utils.getElement('#favoriteBtn')
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
   */
  async init() {
    try {
      // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑
      await this.phrasesAPI.loadPhrases();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
      this.setupEventListeners();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
      this.updateUI();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π
      if (this.state.settings.keyboardShortcuts) {
        this.setupKeyboardShortcuts();
      }
      
      console.log('–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã:', error);
      this.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã', 'error');
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    this.elements.categoryButtons.forEach(btn => {
      btn.addEventListener('click', (e) => this.selectCategory(e.target.dataset.category));
    });

    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if (this.elements.nextBtn) {
      this.elements.nextBtn.addEventListener('click', () => this.nextPhrase());
    }

    if (this.elements.shareBtn) {
      this.elements.shareBtn.addEventListener('click', () => this.sharePhrase());
    }

    if (this.elements.favoriteBtn) {
      this.elements.favoriteBtn.addEventListener('click', () => this.toggleFavorite());
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('visibilitychange', () => {
      if (!document.hidden) {
        this.checkForUpdates();
      }
    });
  }

  /**
   * –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async selectCategory(category) {
    if (!CONFIG.CATEGORIES[category]) return;

    this.state.currentCategory = category;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–Ω–æ–ø–æ–∫
    this.elements.categoryButtons.forEach(btn => {
      const isActive = btn.dataset.category === category;
      btn.classList.toggle('active', isActive);
      btn.setAttribute('aria-pressed', isActive.toString());
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (this.elements.phraseCategory) {
      await this.animateElementChange(this.elements.phraseCategory, () => {
        this.elements.phraseCategory.textContent = CONFIG.CATEGORIES[category].name;
      });
    }

    // –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (Utils.checkBrowserSupport().vibration) {
      navigator.vibrate(50);
    }

    this.showToast(`–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${CONFIG.CATEGORIES[category].name}`, 'info');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—Ä–∞–∑—ã
   */
  async nextPhrase() {
    if (this.state.isLoading) return;

    this.state.isLoading = true;
    this.state.phraseCount++;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
    if (this.elements.phraseCounter) {
      this.elements.phraseCounter.textContent = `–§—Ä–∞–∑–∞ #${this.state.phraseCount}`;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    this.setLoadingState(true);

    try {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
      await Utils.delay(CONFIG.ANIMATIONS.FAST);

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑—ã
      const newPhrase = this.phrasesAPI.getRandomPhrase(
        this.state.currentCategory, 
        this.recentPhrases.slice(-5) // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ñ—Ä–∞–∑
      );

      // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
      await this.animateElementChange(this.elements.phraseText, () => {
        this.elements.phraseText.textContent = newPhrase;
        this.state.currentPhrase = newPhrase;
      });

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ñ—Ä–∞–∑
      this.recentPhrases.push(newPhrase);
      if (this.recentPhrases.length > 10) {
        this.recentPhrases.shift();
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.addToHistory(newPhrase);

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      this.updateFavoriteButton();

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ—Ä–∞–∑—ã:', error);
      this.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ—Ä–∞–∑—ã', 'error');
    } finally {
      this.state.isLoading = false;
      this.setLoadingState(false);
    }
  }

  /**
   * –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  async animateElementChange(element, changeCallback) {
    if (!element || !this.state.settings.animationsEnabled) {
      changeCallback();
      return;
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
    element.style.transform = 'translateY(-20px)';
    element.style.opacity = '0';

    await Utils.delay(CONFIG.ANIMATIONS.FAST);

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    changeCallback();

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    element.style.transform = 'translateY(20px)';
    
    await Utils.delay(50);
    
    element.style.transform = 'translateY(0)';
    element.style.opacity = '1';
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
   */
  setLoadingState(loading) {
    if (this.elements.nextBtn) {
      this.elements.nextBtn.disabled = loading;
      this.elements.nextBtn.classList.toggle('loading', loading);
      
      if (loading) {
        this.elements.nextBtn.setAttribute('aria-label', '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑—ã...');
      } else {
        this.elements.nextBtn.setAttribute('aria-label', '–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ñ—Ä–∞–∑—É');
      }
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
   */
  addToHistory(phrase) {
    const historyItem = {
      id: Utils.generateId(),
      text: phrase,
      category: this.state.currentCategory,
      timestamp: Date.now()
    };

    this.state.history.unshift(historyItem);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    if (this.state.history.length > 100) {
      this.state.history = this.state.history.slice(0, 100);
    }

    this.storage.set(CONFIG.STORAGE.HISTORY_KEY, this.state.history);
  }

  /**
   * –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ—Ä–∞–∑–æ–π
   */
  async sharePhrase() {
    if (!this.state.currentPhrase) {
      this.showToast('–ù–µ—Ç —Ñ—Ä–∞–∑—ã –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞', 'warning');
      return;
    }

    const shareData = {
      title: '–ê–±—Å—É—Ä–¥–Ω–∞—è –ò–≥—Ä–∞',
      text: `"${this.state.currentPhrase}" ‚Äî –∏–∑ –∏–≥—Ä—ã "–ê–±—Å—É—Ä–¥–Ω–∞—è –ò–≥—Ä–∞"`,
      url: window.location.href
    };

    try {
      if (Utils.checkBrowserSupport().webShare && navigator.canShare(shareData)) {
        await navigator.share(shareData);
        this.showToast('–§—Ä–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', 'success');
      } else {
        // Fallback: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        const success = await Utils.copyToClipboard(`${shareData.text}\n\n${shareData.url}`);
        if (success) {
          this.showToast('–§—Ä–∞–∑–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        } else {
          this.showToast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É', 'error');
        }
      }
    } catch (error) {
      if (error.name !== 'AbortError') {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∞—Ä–∏–Ω–≥–µ:', error);
        this.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ', 'error');
      }
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
   */
  toggleFavorite() {
    if (!this.state.currentPhrase) return;

    const favoriteIndex = this.state.favorites.findIndex(
      fav => fav.text === this.state.currentPhrase
    );

    if (favoriteIndex > -1) {
      // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      this.state.favorites.splice(favoriteIndex, 1);
      this.showToast('–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', 'info');
    } else {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      const favoriteItem = {
        id: Utils.generateId(),
        text: this.state.currentPhrase,
        category: this.state.currentCategory,
        timestamp: Date.now()
      };
      
      this.state.favorites.unshift(favoriteItem);
      this.showToast('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!', 'success');
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ 50 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    if (this.state.favorites.length > 50) {
      this.state.favorites = this.state.favorites.slice(0, 50);
    }

    this.storage.set(CONFIG.STORAGE.FAVORITES_KEY, this.state.favorites);
    this.updateFavoriteButton();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
   */
  updateFavoriteButton() {
    if (!this.elements.favoriteBtn || !this.state.currentPhrase) return;

    const isFavorite = this.state.favorites.some(
      fav => fav.text === this.state.currentPhrase
    );

    if (isFavorite) {
      this.elements.favoriteBtn.innerHTML = '‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º';
      this.elements.favoriteBtn.setAttribute('aria-label', '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
    } else {
      this.elements.favoriteBtn.innerHTML = 'ü§ç –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
      this.elements.favoriteBtn.setAttribute('aria-label', '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π
   */
  setupKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ input —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
      if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;

      switch (e.key.toLowerCase()) {
        case ' ':
        case 'enter':
          e.preventDefault();
          this.nextPhrase();
          break;
        case 's':
          e.preventDefault();
          this.sharePhrase();
          break;
        case 'f':
          e.preventDefault();
          this.toggleFavorite();
          break;
        case 't':
          e.preventDefault();
          // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π themeManager
          if (window.themeManager) {
            window.themeManager.toggle();
          }
          break;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
          e.preventDefault();
          const categories = Object.keys(CONFIG.CATEGORIES);
          const categoryIndex = parseInt(e.key) - 1;
          if (categories[categoryIndex]) {
            this.selectCategory(categories[categoryIndex]);
          }
          break;
      }
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
   */
  updateUI() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    this.elements.categoryButtons.forEach(btn => {
      const isActive = btn.dataset.category === this.state.currentCategory;
      btn.classList.toggle('active', isActive);
      btn.setAttribute('aria-pressed', isActive.toString());
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (this.elements.phraseCategory) {
      this.elements.phraseCategory.textContent = CONFIG.CATEGORIES[this.state.currentCategory].name;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
    if (this.elements.phraseCounter) {
      this.elements.phraseCounter.textContent = `–§—Ä–∞–∑–∞ #${this.state.phraseCount}`;
    }

    this.updateFavoriteButton();
  }

  /**
   * –ü–æ–∫–∞–∑ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  showToast(message, type = 'info', duration = 3000) {
    const toast = document.createElement('div');
    toast.className = `fixed top-4 right-4 p-4 rounded-lg shadow-xl z-50 max-w-sm transition-all duration-300 transform translate-x-full`;
    
    const colors = {
      success: 'bg-green-500 text-white',
      error: 'bg-red-500 text-white', 
      info: 'bg-blue-500 text-white',
      warning: 'bg-yellow-500 text-black'
    };
    
    toast.className += ` ${colors[type] || colors.info}`;
    toast.textContent = message;
    toast.setAttribute('role', 'alert');
    toast.setAttribute('aria-live', 'polite');
    
    document.body.appendChild(toast);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => {
      toast.classList.remove('translate-x-full');
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    setTimeout(() => {
      toast.classList.add('translate-x-full');
      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, 300);
    }, duration);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  async checkForUpdates() {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ PWA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
  }
}

// ================================================
// ‚ú® –°–ò–°–¢–ï–ú–ê –ê–ù–ò–ú–ê–¶–ò–ò –ß–ê–°–¢–ò–¶
// ================================================

class ParticleSystem {
  constructor() {
    this.container = Utils.getElement('.particles', false);
    this.particles = [];
    this.animationId = null;
    this.isActive = false;
    
    if (this.container) {
      this.init();
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —á–∞—Å—Ç–∏—Ü
   */
  init() {
    this.createParticles();
    this.startAnimation();
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', Utils.debounce(() => {
      this.recreateParticles();
    }, 250));
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
   */
  createParticles() {
    this.container.innerHTML = '';
    this.particles = [];
    
    const particleCount = window.innerWidth < 768 ? 15 : 30;
    
    for (let i = 0; i < particleCount; i++) {
      const particle = this.createParticle();
      this.particles.push(particle);
      this.container.appendChild(particle.element);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏—Ü—ã
   */
  createParticle() {
    const element = document.createElement('div');
    element.className = 'particle';
    
    const size = Math.random() * 2 + 2;
    element.style.width = size + 'px';
    element.style.height = size + 'px';
    element.style.left = Math.random() * 100 + '%';
    element.style.top = Math.random() * 100 + '%';
    element.style.animationDelay = Math.random() * 8 + 's';
    element.style.animationDuration = (Math.random() * 6 + 8) + 's';
    
    return {
      element,
      x: Math.random() * window.innerWidth,
      y: Math.random() * window.innerHeight,
      vx: (Math.random() - 0.5) * 0.5,
      vy: (Math.random() - 0.5) * 0.5,
      size
    };
  }

  /**
   * –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
   */
  recreateParticles() {
    this.createParticles();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
   */
  startAnimation() {
    if (this.isActive) return;
    this.isActive = true;
    this.animate();
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
   */
  stopAnimation() {
    if (this.animationId) {
      cancelAnimationFrame(this.animationId);
      this.animationId = null;
    }
    this.isActive = false;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∏–º–∞—Ü–∏–∏
   */
  animate() {
    if (!this.isActive) return;
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∞–Ω–∏–º–∞—Ü–∏–∏
    // –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CSS –∞–Ω–∏–º–∞—Ü–∏—è
    
    this.animationId = requestAnimationFrame(() => this.animate());
  }
}

// ================================================
// üöÄ PWA –ú–ï–ù–ï–î–ñ–ï–†
// ================================================

class PWAManager {
  constructor() {
    this.registration = null;
    this.updateAvailable = false;
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA
   */
  async init() {
    if (!Utils.checkBrowserSupport().serviceWorker) {
      console.log('Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      return;
    }

    try {
      this.registration = await navigator.serviceWorker.register('/sw.js');
      console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', this.registration);
      
      this.setupUpdateListener();
      this.checkForUpdates();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  setupUpdateListener() {
    if (!this.registration) return;

    this.registration.addEventListener('updatefound', () => {
      const newWorker = this.registration.installing;
      
      newWorker.addEventListener('statechange', () => {
        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
          this.updateAvailable = true;
          this.showUpdatePrompt();
        }
      });
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  async checkForUpdates() {
    if (!this.registration) return;

    try {
      await this.registration.update();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
    }
  }

  /**
   * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
   */
  showUpdatePrompt() {
    const notification = document.createElement('div');
    notification.className = 'fixed bottom-4 left-4 right-4 bg-blue-600 text-white p-4 rounded-lg shadow-lg z-50 flex items-center justify-between';
    notification.innerHTML = `
      <div>
        <strong>–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!</strong>
        <p class="text-sm">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.</p>
      </div>
      <div class="flex gap-2">
        <button class="px-3 py-1 bg-white text-blue-600 rounded text-sm font-medium" id="updateApp">
          –û–±–Ω–æ–≤–∏—Ç—å
        </button>
        <button class="px-3 py-1 border border-white rounded text-sm" id="dismissUpdate">
          –ü–æ–∑–∂–µ
        </button>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    notification.querySelector('#updateApp').addEventListener('click', () => {
      window.location.reload();
    });
    
    notification.querySelector('#dismissUpdate').addEventListener('click', () => {
      notification.remove();
    });
  }
}

// ================================================
// üéØ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ================================================

class App {
  constructor() {
    this.components = {};
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async init() {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
      const support = Utils.checkBrowserSupport();
      console.log('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞:', support);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      this.components.storage = new StorageManager();
      this.components.theme = new ThemeManager();
      this.components.particles = new ParticleSystem();
      this.components.game = new GameController();
      this.components.pwa = new PWAManager();

      // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Ç–µ–º—ã –¥–ª—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
      window.themeManager = this.components.theme;

      // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      this.components.storage.cleanup();

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
      this.setupErrorHandling();

      console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  setupErrorHandling() {
    window.addEventListener('error', (event) => {
      console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
    });

    window.addEventListener('unhandledrejection', (event) => {
      console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å:', event.reason);
      event.preventDefault();
    });
  }
}

// ================================================
// üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ================================================

// –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    window.absurdiaApp = new App();
  });
} else {
  window.absurdiaApp = new App();
}